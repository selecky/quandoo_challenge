// Mocks generated by Mockito 5.0.17 from annotations
// in quandoo_challenge/test/unit/pubBloc_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i3;

import 'package:http/http.dart' as _i6;
import 'package:internet_connection_checker/internet_connection_checker.dart'
    as _i4;
import 'package:mockito/mockito.dart' as _i1;
import 'package:quandoo_challenge/customWidgets/Pub.dart' as _i5;
import 'package:quandoo_challenge/repository/repository.dart' as _i2;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

/// A class which mocks [Repository].
///
/// See the documentation for Mockito's code generation for more information.
class MockRepository extends _i1.Mock implements _i2.Repository {
  MockRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<bool> hasInternet(_i4.InternetConnectionChecker? checker) =>
      (super.noSuchMethod(Invocation.method(#hasInternet, [checker]),
          returnValue: Future<bool>.value(false)) as _i3.Future<bool>);
  @override
  _i3.Future<List<_i5.Pub>> fetchPubs(_i6.Client? client) =>
      (super.noSuchMethod(Invocation.method(#fetchPubs, [client]),
              returnValue: Future<List<_i5.Pub>>.value(<_i5.Pub>[]))
          as _i3.Future<List<_i5.Pub>>);
}
